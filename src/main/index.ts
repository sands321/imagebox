import { app, BrowserWindow, ipcMain, net, protocol } from "electron";
import { ElUtil } from "../lib/elutil";
import { Util } from "../lib/util";
import { initRpc } from "./rpc-service";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // 800x600
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      //1.ci=T:br可用contextBridge
      //1.ni=T:rp可用require
      nodeIntegration: true,
      contextIsolation: false,
      //支持rp访问files://xxx
      // //关闭csp
      // disableBlinkFeatures: "BlockCredentialedSubresources",
      webSecurity: false,
      allowRunningInsecureContent: true,
      // partition,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (Util.isDev) {
    mainWindow.webContents.openDevTools();
  }
};

// const partition = "persist:app";
protocol.registerSchemesAsPrivileged([
  {
    scheme: "app",
    privileges: {
      //F:img.src报csp,不走protocol.handle
      bypassCSP: true,
    },
  },
]);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  console.log("app>>ready");
  // const ses = session.fromPartition(partition);
  protocol.handle("app", (req: GlobalRequest) => {
    // const url = req.url.replace("app://", "");
    // return { path: path.normalize(`${__dirname}/../${url}`) };
    const f1 = "file://" + req.url.slice("app://".length);
    // console.log(`protocol@app>>${req.url} | ${f1}`);
    const r = net.fetch(f1);
    return r;
  });
  //---
  initRpc();
  //---
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ElUtil.printPaths();
